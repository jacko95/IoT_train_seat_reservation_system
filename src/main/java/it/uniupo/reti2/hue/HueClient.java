package it.uniupo.reti2.hue;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.client.RestTemplate;


import java.util.Map;

public class HueClient extends Thread{
    
    private static String lightsURL;// base URL for lights
    private static RestTemplate rest;// RestTemplate instance
    
    public void run() {//può prendere in ingresso un treno per regoare le luci???
        // the URL of the Philips Hue bridge
        // String baseURL = "http://172.30.1.138";
        // with the emulator, use instead:
        String baseURL = "http://localhost:8000";//api.bart.gov, a chi fare la richiesta (server)

        // sample username, generated by following https://developers.meethue.com/develop/get-started-2/
        // String username = "C0vPwqjJZo5Jt9Oe5HgO6sBFFMxgoR532IxFoGmx";
        // with the emulator, use instead:
        String username = "newdeveloper";

        // init static variables
        lightsURL = baseURL + "/api/" + username + "/lights/"; //l'ordine non conta nell'URL, bisogna
        // mettere & perche non risorsa ecc...
        rest = new RestTemplate();
        
        // get all lights from the Hue bridge
        Map<String, ?> allLights = rest.getForObject(lightsURL, Map.class); //chiamata get su lightsURL e prende lal rispsta e la converte in una mappa
        //da json a mappa, anche mettere array
                        
        if(allLights != null) {// controlliamo tutte le luci che siano != null

            // iterate over the Hue lamps, turn them on with the color loop effect
            // prepare the header for the HTTP request
            HttpHeaders headers = new HttpHeaders();
            
            // it's a json
            headers.setContentType(MediaType.APPLICATION_JSON);//perche il formato e' json

            spegni(allLights, headers);
        }

    }

    private static void changeStatus(String lightId, HttpEntity<String> request) {
        String callURL = lightsURL + lightId + "/state";
        rest.put(callURL, request);
    }
    
    public static void accendi(Map<String, ?> tutteLuci, HttpHeaders headers) {
    	// create a new HTTP request to turn everything off
        String on = "{\"on\":true, \"hue\": 0, \"sat\": 0, \"bri\": 0}";
        HttpEntity<String> onRequest = new HttpEntity<>(on, headers);
    	// iterate over the Hue lamps and turn them effectively on
        for (String light : tutteLuci.keySet()) {
            changeStatus(light, onRequest);
        }
    }
    
    public static void accendiSingolo(int luce, HttpHeaders headers) {
		String colora = "{\"on\":true}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = lightsURL + luce + "/state";
		rest.put(callURL, coloraRequest);
    }
    
    public static void spegni(Map<String, ?> tutteLuci, HttpHeaders headers) {
    	// create a new HTTP request to turn everything off
        String off = "{\"on\" : false}";
        HttpEntity<String> offRequest = new HttpEntity<>(off, headers);
    	// iterate over the Hue lamps and turn them effectively off
        for (String light : tutteLuci.keySet()) {
            changeStatus(light, offRequest);
        }
    }
    
    public static void spegniSingolo(String luce, HttpHeaders headers) {
		String colora = "{\"on\":false}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = lightsURL + luce + "/state";
		rest.put(callURL, coloraRequest);
    }

    //passare in input in intero bri per aumentare l'intensita' della luce verde
    public static void verde(Map<String, ?> tutteLuci, HttpHeaders headers) {
		String colora = "{\"on\":true, \"hue\": 20000, \"sat\": 250, \"bri\": 300}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = null;
		for(String luce : tutteLuci.keySet()) {
			callURL = lightsURL + luce + "/state";
			rest.put(callURL, coloraRequest);
		}
    }
    
    public static void verdeSingolo(int luce, HttpHeaders headers) {
		String colora = "{\"on\":true, \"hue\": 20000, \"sat\": 250, \"bri\": 100}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = lightsURL + luce + "/state";
		rest.put(callURL, coloraRequest);
    }
    
    public static void verdeSingoloBri(int luce, HttpHeaders headers, int bri) {
		String colora = "{\"on\":true, \"hue\": 20000, \"sat\": 250, \"bri\": \"" + bri + "\"}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = lightsURL + luce + "/state";
		rest.put(callURL, coloraRequest);
    }
    
    public static void rosso(Map<String, ?> tutteLuci, HttpHeaders headers) {
		String colora = "{\"on\":true, \"hue\": 0, \"sat\": 250, \"bri\": 300}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = null;
		while(true) {
			for(String luce : tutteLuci.keySet()) {
				callURL = lightsURL + luce + "/state";
				rest.put(callURL, coloraRequest);
			}
			
			spegni(tutteLuci, headers);
			
			try {
				Thread.sleep(250);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}	
		}
    }
    
    public static void rossoSingolo(String luce, HttpHeaders headers) {
		String colora = "{\"on\":true, \"hue\": 0, \"sat\": 250, \"bri\": 250}";
		HttpEntity<String> coloraRequest = new HttpEntity<>(colora, headers);
		String callURL = null;
		while(true) {
			
			callURL = lightsURL + luce + "/state";
			rest.put(callURL, coloraRequest);
			
			//spegniSingolo(luce, headers);
			
			try {
				Thread.sleep(250);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			spegniSingolo(luce, headers);
			
			try {
				Thread.sleep(250);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
    }
    
}
